{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },

  "AllowedHosts": "*",

  "MongoDbSettings": {
    "ConnectionString": "mongodb://localhost:27017",
    "DatabaseName": "ParseDatabase"
  },

  "ConnectionStrings": {
    "AppConnection": "Data Source=10.110.81.40; Initial Catalog=ScionAnalyticsEvents; User=ScionAPI; Password=Scion#1;",
    "ASNDbConnection": "Data Source=10.110.81.40; Initial Catalog=ScionAnalyticsASN; User=ScionAPI; Password=Scion#1;",
    "RedisConnectionString": "localhost:6379,ssl=False"
  },


  "Auth": {
    //auth server's url, e.g. http://localhost:5051/ or https://auth.example.com/ or leave empty for mode when authorization
    // and resource server is the same application
    "Authority": "",
    "Audience": "resource_server",
    "PublicCertPath": "./certificates/scionanalytics.crt",
    "PrivateKeyPath": "./certificates/scionanalytics.pfx",
    "PrivateKeyPassword": "scion"
  },
  "MessageBrokersOptions": {
    "messageBrokerType": "rabbitmq",
    "username": "user",
    "password": "password",
    "virtualHost": "/",
    "port": 5672,
    "hostnames": [
      "rabbitmq"
    ],
    "requestTimeout": "00:00:10",
    "publishConfirmTimeout": "00:00:01",
    "recoveryInterval": "00:00:10",
    "persistentDeliveryMode": true,
    "autoCloseConnection": true,
    "automaticRecovery": true,
    "topologyRecovery": true,
    "exchange": {
      "durable": true,
      "autoDelete": false,
      "type": "Topic",
      "name": ""
    },
    "queue": {
      "declare": true,
      "durable": true,
      "exclusive": false,
      "autoDelete": false
    }
  },
  "MessageBrokerOptions": {
    "Host": "redis",
    "VirtualHost": "/",
    "Port": 5672,
    "User": "user",
    "Password": "password"
  },
  "ElasticConfiguration": {
    "Uri": "http://localhost:9200"
  },
  "ElastiASNm": {
    "ServerUrls": "http://localhost:8200"
  },
  "ConsulOptions": {
    "ConsulAddress": "http://localhost:8500",
    "ServiceAddress": "http://localhost:60890",
    "ServiceName": "OrganizationService",
    "DisableAgentCheck": false,
    "Tags": []
  },
  "Serilog": {
    "WriteTo": [
      {
        "Name": "Elasticsearch",
        "Args": {
          "nodeUris": "http://localhost:9200",
          "batchPostingLimit": 50,
          "period": 2000,
          "inlineFields": true,
          "restrictedToMinimumLevel": "Warning",
          "bufferBaseFilename": "/log",
          "bufferFileSizeLimitBytes": 5242880,
          "bufferLogShippingInterval": 5000,
          "bufferRetainedInvalidPayloadsLimitBytes": 5000,
          "bufferFileCountLimit": 31,
          "connectionTimeout": 5,
          "emitEventFailure": "WriteToSelfLog",
          "queueSizeLimit": "100000",
          "autoRegisterTemplate": true,
          "autoRegisterTemplateVersion": "ESv7",
          "overwriteTemplate": false,
          "registerTemplateFailure": "IndexAnyway",
          "numberOfShards": 20,
          "numberOfReplicas": 10
        }
      }
    ]
  },
  "OutboxOptions": {
    "OutboxType": "mongo",
    "DatabaseName": "OutboxDb",
    "CollectionName": "ParseMessages",
    "ConnectionString": "mongodb://localhost:27017",
    "DeleteAfter": true
  },
  "EventStoresOptions": {
    "EventStoreType": "mongo",
    "DatabaseName": "EventStore",
    "CollectionName": "ParseEvents",
    "ConnectionString": "mongodb://localhost:27017"
  },
  "AzureAd": {
    "Enabled": false,
    "AuthenticationType": "AzureAD",
    "AuthenticationASNtion": "Azure Active Directory",
    "ApplicationId": "(Replace this with Application (client) ID, e.g. 01234567-89ab-cdef-0123-456789abcdef)",
    "TenantId": "(Replace this with Directory (tenant) ID, e.g. abcdef01-2345-6789-abcd-ef0123456789)",
    "AzureAdInstance": "https://login.microsoftonline.com/",
    //If your app has custom signing keys as a result of using the claims-mapping feature, you must append an appid query parameter containing the app ID in order to get a
    //jwks_uri pointing to your app's signing key information.
    //For example: https://login.microsoftonline.com/{tenant}/v2.0/.well-known/openid-configuration?appid=6731de76-14a6-49ae-97bc-6eba6914391e contains a jwks_uri
    //of https://login.microsoftonline.com/{tenant}/discovery/v2.0/keys?appid=6731de76-14a6-49ae-97bc-6eba6914391e.
    //Please uncomment the flowing property if our app has custom signing keys.
    //"MetadataAddress": "https://login.microsoftonline.com/{{TenantId}}/v2.0/.well-known/openid-configuration?appid={{ApplicationId}}",
    "DefaultUserType": "Manager"
  },
  "Caching": {
    "CacheEnabled": true,
    "CacheSlidingExpiration": "0:15:00",
    "Redis": {
      "ChannelName": "ScionAnalyticsChannel",
      "BusRetryCount": 3
    }
  },
  "PushNotifications": {
    //Possible values: RedisBackplane | AzureSignalRService | None

    "ScalabilityMode": "None",
    //The URL is used to connect the platform SignalR /pushNotificationHub hub as client to be able sync the local notifications storage with notifications that are produced by other platform instances
    //Need to specify a full URL to  /pushNotificationHub e.g https://your-app-name.azurewebsites.net/pushNotificationHub
    "HubUrl": "http://localhost:10645/pushNotificationHub",
    //Force use WebSockets for notification exchange. Host environment should allow to use WebSockets.
    //For Azure AppService configuration: switch 'Web sockets' to 'On'. 'ARR affinity': 'Off'
    "ForceWebSockets": false,
    "AzureSignalRService": {
      "ConnectionString": "Endpoint=https://{app name}.service.signalr.net;AccessKey={access key};Version=1.0;"
    },
    "RedisBackplane": {
      "ChannelName": "ASNChannel"
    },

    "Notifications": {
      "Gateway": "Smtp",
      "DefaultSender": "noreply@gmail.com",
      "Smtp": {
        "SmtpServer": "http://smtp.gmail.com",
        "Port": 587,
        "Login": "",
        "Password": ""
      },
      "SendGrid": {
        "ApiKey": ""
      }
    },


    "EPPlus": {
      "ExcelPackage": {
        "LicenseContext": "NonCommercial" //The license context used
      }
    }



  }
}
